import 'dart:io';
import 'dart:convert';
import 'dart:math';
import 'package:http/http.dart' as http;
import 'Empresa.dart';
import 'Local.dart';
import 'Tanque.dart';
import 'Dispositivo.dart';
import 'SensorUltrassonico.dart';
import 'Leitura.dart';
import 'Producao.dart';
import 'Usuario.dart';
import 'DatabaseConnection.dart';

class Menu {
  final DatabaseConnection dbConnection;
  bool _conectado = false;

  // üî• CONFIGURA√á√ïES FIREBASE - REAIS
  static const String _baseUrl = 'tanksense---v2-default-rtdb.firebaseio.com';
  static const String _authToken = 'XALK5M3Yuc7jQgS62iDXpnAKvsBJEWKij0hR02tx';

  // Listas locais
  final List<Empresa> _empresas = [];
  final List<Local> _locais = [];
  final List<Tanque> _tanques = [];
  final List<Dispositivo> _dispositivos = [];
  final List<SensorUltrassonico> _sensores = [];
  final List<Leitura> _leituras = [];
  final List<Producao> _producoes = [];
  final List<Usuario> _usuarios = [];

  Menu(this.dbConnection);

  Future<void> inicializar() async {
    print('\nüîÑ INICIALIZANDO SISTEMA TANKSENSE...');
    _conectado = await dbConnection.connect();

    if (_conectado) {
      print('üéâ CONEX√ÉO COM BANCO ESTABELECIDA COM SUCESSO!');
      await _carregarDadosDoBanco();
    } else {
      print('‚ùå FALHA NA CONEX√ÉO COM BANCO');
      print('‚ö†Ô∏è  Os dados ser√£o salvos apenas localmente');
    }

    // ‚úÖ CARREGAR DADOS DO FIREBASE
    print('\nüî• CONECTANDO AO FIREBASE...');
    await _carregarLeiturasFirebase();
  }

  // ========== M√âTODOS FIREBASE ==========

  Future<void> _carregarLeiturasFirebase() async {
    try {
      print('üì° Buscando leituras no Firebase...');

      final url = Uri.https(_baseUrl, '/leituras.json', {'auth': _authToken});
      final response = await http.get(url);

      if (response.statusCode == 200) {
        final data = json.decode(response.body);
        _leituras.clear();

        if (data != null && data is Map) {
          data.forEach((key, value) {
            try {
              if (value is Map<String, dynamic>) {
                final leitura = Leitura.fromFirebase(value, key);
                _leituras.add(leitura);
                print(
                    'üì• Leitura carregada: ${leitura.nivelCm}cm (${leitura.porcentagem}%)');
              } else {
                print('‚ö†Ô∏è  Dados inv√°lidos para a leitura $key: $value');
              }
            } catch (e) {
              print('‚ùå Erro ao processar leitura $key: $e');
            }
          });

          print('‚úÖ ${_leituras.length} leituras carregadas do Firebase');
        } else {
          print('‚ÑπÔ∏è  Nenhuma leitura encontrada no Firebase');
        }
      } else {
        print('‚ùå Erro ao carregar do Firebase: ${response.statusCode}');
      }
    } catch (e) {
      print('‚ùå Erro de conex√£o com Firebase: $e');
    }
  }

  /* Future<void> _enviarLeituraFirebase(double distanciaCm, double nivelCm, double porcentagem, String status) async {
    try {
      final novaLeitura = {
        'timestamp': DateTime.now().toIso8601String(),
        'distancia_cm': distanciaCm,
        'nivel_cm': nivelCm,
        'porcentagem': porcentagem,
        'status': status,
      };

      final url = Uri.https(_baseUrl, '/leituras.json', {'auth': _authToken});
      final response = await http.post(
        url,
        body: json.encode(novaLeitura),
        headers: {'Content-Type': 'application/json'},
      );

      if (response.statusCode == 200) {
        final responseData = json.decode(response.body);
        final leituraId = responseData['name']; // ID gerado pelo Firebase
        
        print('‚úÖ Leitura enviada para Firebase:');
        print('   üìè Dist√¢ncia: ${distanciaCm.toStringAsFixed(2)} cm');
        print('   üåä N√≠vel: ${nivelCm.toStringAsFixed(2)} cm');
        print('   üìä Porcentagem: ${porcentagem.toStringAsFixed(1)}%');
        print('   üö¶ Status: $status');

        // Adicionar localmente tamb√©m
        final novaLeituraLocal = Leitura(
          DateTime.now().millisecondsSinceEpoch,
          DateTime.now(),
          distanciaCm,
          nivelCm,
          porcentagem,
          status,
        );
        _leituras.add(novaLeituraLocal);
      } else {
        print('‚ùå Erro ao enviar para Firebase: ${response.statusCode}');
      }
    } catch (e) {
      print('‚ùå Erro ao enviar leitura para Firebase: $e');
    }
  }
*/

  // ========== CARREGAR DADOS DO BANCO - CORRIGIDO ==========
  Future<void> _carregarDadosDoBanco() async {
    if (!_conectado) return;

    try {
      print('\nüì• CARREGANDO DADOS DO BANCO...');

      // Carregar empresas
      try {
        var resultados =
            await dbConnection.connection!.query('SELECT * FROM empresa');
        if (resultados.isNotEmpty) {
          for (var row in resultados) {
            int id = row['idEmpresa'] ?? row[0] as int;
            String nome = row['nome'] ?? row[1] as String;
            String cnpj = row['cnpj'] ?? row[2] as String;
            _empresas.add(Empresa(id, nome, cnpj));
          }
          print('üè¢ Empresas carregadas: ${_empresas.length}');
        } else {
          print('‚ÑπÔ∏è  Nenhuma empresa encontrada no banco');
        }
      } catch (e) {
        print('‚ÑπÔ∏è  Nenhuma empresa encontrada no banco: $e');
      }

      // Carregar locais
      try {
        var resultados =
            await dbConnection.connection!.query('SELECT * FROM local');
        if (resultados.isNotEmpty) {
          for (var row in resultados) {
            int id = row['idLocal'] ?? row[0] as int;
            String nome = row['nome'] ?? row[1] as String;
            String referencia = row['referencia'] ?? row[2] as String;
            _locais.add(Local(id, nome, referencia));
          }
          print('üè† Locais carregados: ${_locais.length}');
        } else {
          print('‚ÑπÔ∏è  Nenhum local encontrado no banco');
        }
      } catch (e) {
        print('‚ÑπÔ∏è  Nenhum local encontrado no banco: $e');
      }

      // Carregar dispositivos
      try {
        var resultados =
            await dbConnection.connection!.query('SELECT * FROM dispositivo');
        for (var row in resultados) {
          _dispositivos.add(Dispositivo(row['idDispositivo'] ?? row[0],
              row['modelo'] ?? row[1], row['status'] ?? row[2]));
        }
        print('‚öôÔ∏è  Dispositivos carregados: ${_dispositivos.length}');
      } catch (e) {
        print('‚ÑπÔ∏è  Nenhum dispositivo encontrado no banco: $e');
      }

      // Carregar sensores
      try {
        var resultados =
            await dbConnection.connection!.query('SELECT * FROM sensor');
        for (var row in resultados) {
          _sensores.add(SensorUltrassonico(row['idSensor'] ?? row[0],
              row['tipo'] ?? row[1], row['unidadeMedida'] ?? row[2]));
        }
        print('üì° Sensores carregados: ${_sensores.length}');
      } catch (e) {
        print('‚ÑπÔ∏è  Nenhum sensor encontrado no banco: $e');
      }

      // Carregar tanques
      try {
        var resultados =
            await dbConnection.connection!.query('SELECT * FROM tanque');
        for (var row in resultados) {
          _tanques.add(Tanque(
              row['idTanque'] ?? row[0],
              (row['altura'] ?? row[1]).toDouble(),
              (row['volumeMax'] ?? row[2]).toDouble(),
              (row['volumeAtual'] ?? row[3]).toDouble()));
        }
        print('üõ¢Ô∏è  Tanques carregados: ${_tanques.length}');
      } catch (e) {
        print('‚ÑπÔ∏è  Nenhum tanque encontrado no banco: $e');
      }

      // Carregar usu√°rios
      try {
        var resultados =
            await dbConnection.connection!.query('SELECT * FROM usuario');
        for (var row in resultados) {
          _usuarios.add(Usuario(
            idUsuario: row['idUsuario'] ?? row[0],
            nome: row['nome'] ?? row[1],
            email: row['email'] ?? row[2],
            senhaLogin: row['senhaLogin'] ?? row[3],
            perfil: row['perfil'] ?? row[4],
            dataCriacao: row['dataCriacao'] ?? DateTime.now(),
            ultimoLogin: row['ultimoLogin'] ?? DateTime.now(),
            empresaId: row['empresa_idEmpresa'] ?? row[7] ?? 1,
          ));
        }
        print('üë§ Usu√°rios carregados: ${_usuarios.length}');
      } catch (e) {
        print('‚ÑπÔ∏è  Nenhum usu√°rio encontrado no banco: $e');
      }

      print('\n‚úÖ RESUMO DO CARREGAMENTO:');
      print('üè¢ Empresas: ${_empresas.length}');
      print('üè† Locais: ${_locais.length}');
      print('‚öôÔ∏è  Dispositivos: ${_dispositivos.length}');
      print('üì° Sensores: ${_sensores.length}');
      print('üõ¢Ô∏è  Tanques: ${_tanques.length}');
      print('üë§ Usu√°rios: ${_usuarios.length}');
    } catch (e) {
      print('‚ùå Erro ao carregar dados do banco: $e');
    }
  }

  // ========== M√âTODOS DE CADASTRO ==========
  Future<void> _cadastrarEmpresa() async {
    print('\nüè¢ CADASTRAR EMPRESA');

    stdout.write('Nome: ');
    final nome = stdin.readLineSync()?.trim() ?? '';

    stdout.write('CNPJ: ');
    final cnpj = stdin.readLineSync()?.trim() ?? '';

    if (nome.isEmpty || cnpj.isEmpty) {
      print('‚ùå Nome e CNPJ s√£o obrigat√≥rios!');
      return;
    }

    final empresaExistente = _empresas.firstWhere(
      (empresa) => empresa.cnpj == cnpj,
      orElse: () => Empresa(0, '', ''),
    );

    if (empresaExistente.cnpj.isNotEmpty) {
      print('‚ùå J√° existe uma empresa com este CNPJ!');
      return;
    }

    int novoId = _empresas.isEmpty
        ? 1
        : (_empresas.map((e) => e.idEmpresa).reduce((a, b) => a > b ? a : b) +
            1);
    final empresa = Empresa(novoId, nome, cnpj);
    _empresas.add(empresa);

    if (_conectado) {
      try {
        await dbConnection.connection!.query(
          'INSERT INTO empresa (nome, cnpj) VALUES (?, ?)',
          [empresa.nome, empresa.cnpj],
        );
        print('üíæ Empresa salva no banco de dados!');
      } catch (e) {
        print('‚ùå Erro ao salvar empresa no banco: $e');
      }
    }

    print('‚úÖ Empresa cadastrada com sucesso!');
    empresa.exibirDados();
  }

  Future<void> _cadastrarLocal() async {
    print('\nüè† CADASTRAR LOCAL');

    if (_empresas.isEmpty) {
      print('‚ùå √â necess√°rio cadastrar uma empresa primeiro!');
      return;
    }

    print('\nüìã Empresas dispon√≠veis:');
    for (int i = 0; i < _empresas.length; i++) {
      print('${i + 1} - ${_empresas[i].nome} (CNPJ: ${_empresas[i].cnpj})');
    }

    int? empresaIndex;
    do {
      stdout.write('Selecione a empresa (1-${_empresas.length}): ');
      final input = stdin.readLineSync()?.trim();
      empresaIndex = int.tryParse(input ?? '');

      if (empresaIndex == null ||
          empresaIndex < 1 ||
          empresaIndex > _empresas.length) {
        print('‚ùå Selecione uma empresa v√°lida!');
      }
    } while (empresaIndex == null);

    final empresaSelecionada = _empresas[empresaIndex - 1];

    stdout.write('Nome do local: ');
    final nome = stdin.readLineSync()?.trim() ?? '';

    stdout.write('Refer√™ncia: ');
    final referencia = stdin.readLineSync()?.trim() ?? '';

    if (nome.isEmpty || referencia.isEmpty) {
      print('‚ùå Nome e refer√™ncia s√£o obrigat√≥rios!');
      return;
    }

    final localExistente = _locais.firstWhere(
      (local) => local.nome == nome && local.referencia == referencia,
      orElse: () => Local(0, '', ''),
    );

    if (localExistente.nome.isNotEmpty) {
      print('‚ùå J√° existe um local com este nome e refer√™ncia!');
      return;
    }

    int novoId = _locais.isEmpty
        ? 1
        : (_locais.map((e) => e.id).reduce((a, b) => a > b ? a : b) + 1);
    final local = Local(novoId, nome, referencia);
    _locais.add(local);

    if (_conectado) {
      try {
        await dbConnection.connection!.query(
          'INSERT INTO local (nome, referencia, empresa_idEmpresa) VALUES (?, ?, ?)',
          [local.nome, local.referencia, empresaSelecionada.idEmpresa],
        );
        print('üíæ Local salvo no banco de dados!');
      } catch (e) {
        print('‚ùå Erro ao salvar local no banco: $e');
      }
    }

    print('‚úÖ Local cadastrado com sucesso!');
    print('üè¢ Vinculado √† empresa: ${empresaSelecionada.nome}');
    local.exibirDados();
  }

  Future<void> _cadastrarDispositivo() async {
    print('\n‚öôÔ∏è  CADASTRAR DISPOSITIVO');

    stdout.write('Modelo: ');
    final modelo = stdin.readLineSync()?.trim() ?? '';

    stdout.write('Status (Ativo/Inativo): ');
    final status = stdin.readLineSync()?.trim() ?? '';

    if (modelo.isEmpty || status.isEmpty) {
      print('‚ùå Modelo e status s√£o obrigat√≥rios!');
      return;
    }

    int novoId = _dispositivos.isEmpty
        ? 1
        : (_dispositivos.map((e) => e.id).reduce((a, b) => a > b ? a : b) + 1);
    final dispositivo = Dispositivo(novoId, modelo, status);
    _dispositivos.add(dispositivo);

    if (_conectado) {
      try {
        await dbConnection.connection!.query(
          'INSERT INTO dispositivo (modelo, status) VALUES (?, ?)',
          [dispositivo.modelo, dispositivo.status],
        );
        print('üíæ Dispositivo salvo no banco de dados!');
      } catch (e) {
        print('‚ùå Erro ao salvar dispositivo no banco: $e');
      }
    }

    print('‚úÖ Dispositivo cadastrado com sucesso!');
    dispositivo.exibirDados();
  }

  Future<void> _cadastrarSensor() async {
    print('\nüì° CADASTRAR SENSOR');

    stdout.write('Tipo: ');
    final tipo = stdin.readLineSync()?.trim() ?? '';

    stdout.write('Unidade de Medida: ');
    final unidadeMedida = stdin.readLineSync()?.trim() ?? '';

    if (tipo.isEmpty || unidadeMedida.isEmpty) {
      print('‚ùå Tipo e unidade de medida s√£o obrigat√≥rios!');
      return;
    }

    int novoId = _sensores.isEmpty
        ? 1
        : (_sensores.map((e) => e.id).reduce((a, b) => a > b ? a : b) + 1);
    final sensor = SensorUltrassonico(novoId, tipo, unidadeMedida);
    _sensores.add(sensor);

    if (_conectado) {
      try {
        await dbConnection.connection!.query(
          'INSERT INTO sensor (tipo, unidadeMedida) VALUES (?, ?)',
          [sensor.tipo, sensor.unidadeMedida],
        );
        print('üíæ Sensor salvo no banco de dados!');
      } catch (e) {
        print('‚ùå Erro ao salvar sensor no banco: $e');
      }
    }

    print('‚úÖ Sensor cadastrado com sucesso!');
    sensor.exibirDados();
  }

  Future<void> _cadastrarTanque() async {
    print('\nüõ¢Ô∏è  CADASTRAR TANQUE');

    double? altura;
    do {
      stdout.write('Altura (metros): ');
      final inputAltura = stdin.readLineSync()?.trim();
      altura = double.tryParse(inputAltura ?? '');

      if (altura == null || altura <= 0) {
        print('‚ùå Altura deve ser um n√∫mero positivo!');
      }
    } while (altura == null || altura <= 0);

    double? volumeMax;
    do {
      stdout.write('Volume M√°ximo (litros): ');
      final inputVolume = stdin.readLineSync()?.trim();
      volumeMax = double.tryParse(inputVolume ?? '');

      if (volumeMax == null || volumeMax <= 0) {
        print('‚ùå Volume m√°ximo deve ser um n√∫mero positivo!');
      }
    } while (volumeMax == null || volumeMax <= 0);

    int novoId = _tanques.isEmpty
        ? 1
        : (_tanques.map((e) => e.id).reduce((a, b) => a > b ? a : b) + 1);
    final tanque = Tanque(novoId, altura, volumeMax, 0.0);
    _tanques.add(tanque);

    if (_conectado) {
      try {
        await dbConnection.connection!.query(
          'INSERT INTO tanque (altura, volumeMax, volumeAtual) VALUES (?, ?, ?)',
          [tanque.altura, tanque.volumeMax, tanque.volumeAtual],
        );
        print('üíæ Tanque salvo no banco de dados!');
      } catch (e) {
        print('‚ùå Erro ao salvar tanque no banco: $e');
      }
    }

    print('‚úÖ Tanque cadastrado com sucesso!');
    tanque.exibirDados();
  }

  Future<void> _cadastrarUsuario() async {
    print('\nüë§ CADASTRAR USU√ÅRIO');

    if (_empresas.isEmpty) {
      print('‚ùå √â necess√°rio cadastrar uma empresa primeiro!');
      return;
    }

    stdout.write('Nome: ');
    final nome = stdin.readLineSync()?.trim() ?? '';

    stdout.write('Email: ');
    final email = stdin.readLineSync()?.trim() ?? '';

    stdout.write('Senha: ');
    final senha = stdin.readLineSync()?.trim() ?? '';

    stdout.write('Perfil (Administrador/Operador/Visualizador): ');
    final perfil = stdin.readLineSync()?.trim() ?? '';

    if (nome.isEmpty || email.isEmpty || senha.isEmpty || perfil.isEmpty) {
      print('‚ùå Todos os campos s√£o obrigat√≥rios!');
      return;
    }

    print('\nüìã Empresas dispon√≠veis:');
    for (int i = 0; i < _empresas.length; i++) {
      print('${i + 1} - ${_empresas[i].nome}');
    }

    int? empresaIndex;
    do {
      stdout.write('Selecione a empresa (1-${_empresas.length}): ');
      final input = stdin.readLineSync()?.trim();
      empresaIndex = int.tryParse(input ?? '');

      if (empresaIndex == null ||
          empresaIndex < 1 ||
          empresaIndex > _empresas.length) {
        print('‚ùå Selecione uma empresa v√°lida!');
      }
    } while (empresaIndex == null);

    final empresaSelecionada = _empresas[empresaIndex - 1];

    int novoId = _usuarios.isEmpty
        ? 1
        : (_usuarios.map((e) => e.idUsuario).reduce((a, b) => a > b ? a : b) +
            1);
    final usuario = Usuario(
      idUsuario: novoId,
      nome: nome,
      email: email,
      senhaLogin: senha,
      perfil: perfil,
      dataCriacao: DateTime.now(),
      ultimoLogin: DateTime.now(),
      empresaId: empresaSelecionada.idEmpresa,
    );

    _usuarios.add(usuario);

    if (_conectado) {
      try {
        await dbConnection.connection!.query(
          'INSERT INTO usuario (nome, email, senhaLogin, perfil, dataCriacao, ultimoLogin, empresa_idEmpresa) VALUES (?, ?, ?, ?, ?, ?, ?)',
          [
            usuario.nome,
            usuario.email,
            usuario.senhaLogin,
            usuario.perfil,
            usuario.dataCriacao.toIso8601String(),
            usuario.ultimoLogin.toIso8601String(),
            usuario.empresaId
          ],
        );
        print('üíæ Usu√°rio salvo no banco de dados!');
      } catch (e) {
        print('‚ùå Erro ao salvar usu√°rio no banco: $e');
      }
    }

    print('‚úÖ Usu√°rio cadastrado com sucesso!');
    usuario.exibirDados();
  }

  // ========== M√âTODOS DE CONSULTA ==========
  void _listarTodasEntidades() {
    print('\nüìã RESUMO GERAL DO SISTEMA');
    print('‚ïê' * 50);
    print('üè¢ EMPRESAS: ${_empresas.length}');
    for (var empresa in _empresas) {
      print('   ‚Ä¢ ${empresa.nome} (CNPJ: ${empresa.cnpj})');
    }

    print('\nüè† LOCAIS: ${_locais.length}');
    for (var local in _locais) {
      print('   ‚Ä¢ ${local.nome} (Ref: ${local.referencia})');
    }

    print('\n‚öôÔ∏è  DISPOSITIVOS: ${_dispositivos.length}');
    for (var dispositivo in _dispositivos) {
      print('   ‚Ä¢ ${dispositivo.modelo} (Status: ${dispositivo.status})');
    }

    print('\nüì° SENSORES: ${_sensores.length}');
    for (var sensor in _sensores) {
      print('   ‚Ä¢ ${sensor.tipo} (Unidade: ${sensor.unidadeMedida})');
    }

    print('\nüõ¢Ô∏è  TANQUES: ${_tanques.length}');
    for (var tanque in _tanques) {
      print('   ‚Ä¢ Tanque ${tanque.id} (Altura: ${tanque.altura}m)');
    }

    print('\nüë§ USU√ÅRIOS: ${_usuarios.length}');
    for (var usuario in _usuarios) {
      print('   ‚Ä¢ ${usuario.nome} (Perfil: ${usuario.perfil})');
    }

    print('\nüìä LEITURAS: ${_leituras.length}');
    if (_leituras.isNotEmpty) {
      final ultimaLeitura = _leituras.last;
      print(
          '   ‚Ä¢ √öltima: ${ultimaLeitura.nivelCm.toStringAsFixed(1)}cm (${ultimaLeitura.porcentagem.toStringAsFixed(1)}%) - ${ultimaLeitura.status}');
    }

    print('üè≠ PRODU√á√ïES: ${_producoes.length}');
    print('‚ïê' * 50);
  }

  void _listarEmpresas() {
    print('\nüè¢ LISTA DE EMPRESAS');
    print('‚ïê' * 50);

    if (_empresas.isEmpty) {
      print('üì≠ Nenhuma empresa cadastrada');
    } else {
      for (var empresa in _empresas) {
        print('ID: ${empresa.idEmpresa}');
        print('Nome: ${empresa.nome}');
        print('CNPJ: ${empresa.cnpj}');
        print('‚îÄ' * 30);
      }
      print('üìä Total: ${_empresas.length} empresa(s)');
    }
  }

  void _listarLocais() {
    print('\nüè† LISTA DE LOCAIS');
    print('‚ïê' * 50);

    if (_locais.isEmpty) {
      print('üì≠ Nenhum local cadastrado');
    } else {
      for (var local in _locais) {
        print('ID: ${local.id}');
        print('Nome: ${local.nome}');
        print('Refer√™ncia: ${local.referencia}');
        print('‚îÄ' * 30);
      }
      print('üìä Total: ${_locais.length} local(is)');
    }
  }

  void _listarDispositivos() {
    print('\n‚öôÔ∏è  LISTA DE DISPOSITIVOS');
    print('‚ïê' * 50);

    if (_dispositivos.isEmpty) {
      print('üì≠ Nenhum dispositivo cadastrado');
    } else {
      for (var dispositivo in _dispositivos) {
        dispositivo.exibirDados();
      }
      print('üìä Total: ${_dispositivos.length} dispositivo(s)');
    }
  }

  void _listarSensores() {
    print('\nüì° LISTA DE SENSORES');
    print('‚ïê' * 50);

    if (_sensores.isEmpty) {
      print('üì≠ Nenhum sensor cadastrado');
    } else {
      for (var sensor in _sensores) {
        sensor.exibirDados();
      }
      print('üìä Total: ${_sensores.length} sensor(es)');
    }
  }

  void _listarTanques() {
    print('\nüõ¢Ô∏è  LISTA DE TANQUES');
    print('‚ïê' * 50);

    if (_tanques.isEmpty) {
      print('üì≠ Nenhum tanque cadastrado');
    } else {
      for (var tanque in _tanques) {
        tanque.exibirDados();
      }
      print('üìä Total: ${_tanques.length} tanque(s)');
    }
  }

  void _listarUsuarios() {
    print('\nüë§ LISTA DE USU√ÅRIOS');
    print('‚ïê' * 50);

    if (_usuarios.isEmpty) {
      print('üì≠ Nenhum usu√°rio cadastrado');
    } else {
      for (var usuario in _usuarios) {
        usuario.exibirDados();
      }
      print('üìä Total: ${_usuarios.length} usu√°rio(s)');
    }
  }

  void _listarProducoes() {
    print('\nüè≠ LISTA DE PRODU√á√ïES');
    print('‚ïê' * 50);

    if (_producoes.isEmpty) {
      print('üì≠ Nenhuma produ√ß√£o registrada');
    } else {
      for (var producao in _producoes) {
        producao.exibirDados();
      }
      print('üìä Total: ${_producoes.length} produ√ß√£o(√µes)');
    }
  }

  void _listarLeituras() {
    print('\nüìä LISTA DE LEITURAS');
    print('‚ïê' * 50);

    if (_leituras.isEmpty) {
      print('üì≠ Nenhuma leitura registrada');
    } else {
      for (var leitura in _leituras) {
        print(leitura.toString());
      }
      print('üìä Total: ${_leituras.length} leitura(s)');
    }
  }

  // ========== M√âTODOS DE LEITURA E PRODU√á√ÉO ==========
  Future<void> _visualizarUltimaLeitura() async {
    print('\nüìä √öLTIMA LEITURA');
    print('‚ïê' * 50);

    if (_leituras.isEmpty) {
      print('üì≠ Nenhuma leitura registrada');
    } else {
      final ultimaLeitura = _leituras.last;
      ultimaLeitura.exibirDados();
    }
  }

  Future<void> _visualizarUltimas10Leituras() async {
    print('\nüìà √öLTIMAS 10 LEITURAS');
    print('‚ïê' * 50);

    if (_leituras.isEmpty) {
      print('üì≠ Nenhuma leitura registrada');
    } else {
      final ultimasLeituras = _leituras.length <= 10
          ? _leituras
          : _leituras.sublist(_leituras.length - 10);

      for (int i = 0; i < ultimasLeituras.length; i++) {
        final leitura = ultimasLeituras[i];
        print('${i + 1}. ${leitura.toString()}');
      }
      print('üìä Total exibido: ${ultimasLeituras.length} leitura(s)');
    }
  }

  Future<void> _calcularProducao() async {
    print('\nüè≠ CALCULAR PRODU√á√ÉO');
    print('‚ïê' * 50);

    if (_tanques.isEmpty) {
      print('‚ùå Nenhum tanque cadastrado para calcular produ√ß√£o');
      return;
    }

    final random = Random();
    final tanque = _tanques[random.nextInt(_tanques.length)];
    final quantidade = random.nextDouble() * 1000;

    int novoId = _producoes.isEmpty
        ? 1
        : (_producoes.map((e) => e.id).reduce((a, b) => a > b ? a : b) + 1);
    final producao = Producao(
      id: novoId,
      tanqueId: tanque.id,
      dataHora: DateTime.now(),
      quantidade: quantidade,
      tipoProducao: 'Autom√°tica',
      observacoes: 'Produ√ß√£o calculada automaticamente',
    );

    _producoes.add(producao);

    if (_conectado) {
      try {
        await dbConnection.connection!.query(
          'INSERT INTO producao (tanque_idTanque, dataHora, quantidade, tipoProducao, observacoes) VALUES (?, ?, ?, ?, ?)',
          [
            producao.tanqueId,
            producao.dataHora.toIso8601String(),
            producao.quantidade,
            producao.tipoProducao,
            producao.observacoes,
          ],
        );
        print('üíæ Produ√ß√£o salva no banco de dados!');
      } catch (e) {
        print('‚ùå Erro ao salvar produ√ß√£o no banco: $e');
      }
    }

    print('‚úÖ Produ√ß√£o calculada e salva com sucesso!');
    producao.exibirDados();
  }

  // ========== M√âTODO PRINCIPAL ==========
  Future<void> executar() async {
    print("\n");
    print('‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó');
    print('‚ïë           SISTEMA DE MONITORAMENTO           ‚ïë');
    print('‚ïë                üõ¢Ô∏è  TANKSENSE üõ¢Ô∏è                ‚ïë');
    print('‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù');

    if (_conectado) {
      print('‚úÖ CONECTADO AO BANCO DE DADOS');
      print(
          'üìä Dados carregados: ${_empresas.length} empresas, ${_locais.length} locais, ${_dispositivos.length} dispositivos');
    } else {
      print('‚ùå SEM CONEX√ÉO COM BANCO - Dados apenas locais');
    }

    print('üî• CONECTADO AO FIREBASE');
    print('üìä Leituras carregadas: ${_leituras.length}');

    bool executando = true;

    while (executando) {
      print('\n' + '‚ïê' * 60);
      print('üîß MENU PRINCIPAL - TANKSENSE');
      print('‚ïê' * 60);
      print('üìã CADASTROS:');
      print(' 1  - üè¢ Cadastrar Empresa');
      print(' 2  - üè† Cadastrar Local');
      print(' 3  - ‚öôÔ∏è  Cadastrar Dispositivo');
      print(' 4  - üì° Cadastrar Sensor');
      print(' 5  - üõ¢Ô∏è  Cadastrar Tanque');
      print(' 6  - üë§ Cadastrar Usu√°rio');
      print('‚ïê' * 60);
      print('üîç CONSULTAS:');
      print(' 7  - üìä Listar Todas as Entidades');
      print(' 8  - üè¢ Listar Empresas');
      print(' 9  - üè† Listar Locais');
      print('10  - ‚öôÔ∏è  Listar Dispositivos');
      print('11  - üì° Listar Sensores');
      print('12  - üõ¢Ô∏è  Listar Tanques');
      print('13  - üë§ Listar Usu√°rios');
      print('‚ïê' * 60);
      print('üìà FIREBASE & PRODU√á√ÉO:');
      print('14  - üîÑ Visualizar √öltima Leitura');
      print('15  - üìà Visualizar √öltimas 10 Leituras');
      print('16  - üìä Listar Todas as Leituras');
      print('17  - üè≠ Calcular Produ√ß√£o');
      print('18  - üìã Listar Produ√ß√µes');
      print('‚ïê' * 60);
      print(' 0  - ‚ùå Sair');
      print('‚îÄ' * 60);

      stdout.write('üëâ Escolha: ');
      final opcao = stdin.readLineSync();

      switch (opcao) {
        case '1':
          await _cadastrarEmpresa();
          break;
        case '2':
          await _cadastrarLocal();
          break;
        case '3':
          await _cadastrarDispositivo();
          break;
        case '4':
          await _cadastrarSensor();
          break;
        case '5':
          await _cadastrarTanque();
          break;
        case '6':
          await _cadastrarUsuario();
          break;
        case '7':
          _listarTodasEntidades();
          break;
        case '8':
          _listarEmpresas();
          break;
        case '9':
          _listarLocais();
          break;
        case '10':
          _listarDispositivos();
          break;
        case '11':
          _listarSensores();
          break;
        case '12':
          _listarTanques();
          break;
        case '13':
          _listarUsuarios();
          break;
        case '14':
          await _visualizarUltimaLeitura();
          break;
        case '15':
          await _visualizarUltimas10Leituras();
          break;
        case '16':
          _listarLeituras();
          break;
        case '17':
          await _calcularProducao();
          break;
        case '18':
          _listarProducoes();
          break;
        case '0':
          await dbConnection.close();
          print('\nüëã Encerrando Tanksense...');
          executando = false;
          break;
        default:
          print('‚ùå Op√ß√£o inv√°lida!');
      }

      if (executando) {
        print('\n‚èé Pressione Enter para continuar...');
        stdin.readLineSync();
      }
    }

    print('\nüõ¢Ô∏è Tanksense finalizado. At√© logo!');
  }
}
