import 'dart:io';
import 'dart:convert';
import 'Empresa.dart';
import 'Local.dart';
import 'Tanque.dart';
import 'Dispositivo.dart';
import 'SensorUltrassonico.dart';
import 'Leitura.dart';
import 'Producao.dart';
import 'Usuario.dart';
import 'DatabaseConfig.dart';
import 'DatabaseConnection.dart';

class Menu {
  // Firebase Configuration
  static const String _baseUrl = 'tanksense---v2-default-rtdb.firebaseio.com';
  static const String _authToken = 'XALK5M3Yuc7jQgS62iDXpnAKvsBJEWKij0hR02tx';

  // Listas privadas com encapsulamento
  final List<Empresa> _empresas = [];
  final List<Local> _locais = [];
  final List<Tanque> _tanques = [];
  final List<Dispositivo> _dispositivos = [];
  final List<SensorUltrassonico> _sensores = [];
  final List<Leitura> _leituras = [];
  final List<Producao> _producoes = [];
  final List<Usuario> _usuarios = [];

  // Configura√ß√£o e conex√£o com banco de dados
  DatabaseConfig? _dbConfig;
  DatabaseConnection? _dbConnection;
  bool _dbConectado = false;

  // Getters para acesso controlado
  List<Empresa> get empresas => List.from(_empresas);
  List<Local> get locais => List.from(_locais);
  List<Tanque> get tanques => List.from(_tanques);
  List<Dispositivo> get dispositivos => List.from(_dispositivos);
  List<SensorUltrassonico> get sensores => List.from(_sensores);
  List<Leitura> get leituras => List.from(_leituras);
  List<Producao> get producoes => List.from(_producoes);
  List<Usuario> get usuarios => List.from(_usuarios);

  // ========== M√âTODOS FIREBASE ==========

  // M√©todo privado p/ Firebase
  static Future<dynamic> _fetchData(String path) async {
    try {
      final client = HttpClient();
      client.connectionTimeout = const Duration(seconds: 10);

      final uri = Uri(
        scheme: 'https',
        host: _baseUrl,
        path: '$path.json',
        queryParameters: {'auth': _authToken},
      );

      print('üîó Conectando ao Firebase...');

      final request = await client.getUrl(uri);
      final response = await request.close();

      if (response.statusCode == 200) {
        final responseBody = await response.transform(utf8.decoder).join();

        if (responseBody.isEmpty || responseBody == 'null') {
          return null;
        }
        return jsonDecode(responseBody);
      } else {
        throw HttpException('Erro HTTP ${response.statusCode}');
      }
    } catch (e) {
      throw Exception('Erro de conex√£o com Firebase: $e');
    }
  }

  // M√©todos est√°ticos para Firebase
  static Future<Map<String, dynamic>?> getUltimaLeitura() async {
    final data = await _fetchData('ultima_leitura');
    return data != null && data is Map ? Map<String, dynamic>.from(data) : null;
  }

  static Future<List<Map<String, dynamic>>> getUltimas10Leituras() async {
    final data = await _fetchData('leituras');
    if (data == null || data is! Map) return [];

    final List<Map<String, dynamic>> leituras = [];
    data.forEach((key, value) {
      if (value != null && value is Map) {
        leituras.add({'id': key, ...Map<String, dynamic>.from(value)});
      }
    });

    leituras.sort((a, b) {
      final timestampA = a['timestamp'] ?? '';
      final timestampB = b['timestamp'] ?? '';
      return timestampB.compareTo(timestampA);
    });

    return leituras.take(10).toList();
  }

  static Future<List<Map<String, dynamic>>> getTodasLeituras() async {
    final data = await _fetchData('leituras');
    if (data == null || data is! Map) return [];

    final List<Map<String, dynamic>> leituras = [];
    data.forEach((key, value) {
      if (value != null && value is Map) {
        leituras.add({'id': key, ...Map<String, dynamic>.from(value)});
      }
    });

    return leituras;
  }

  // ========== M√âTODOS AUXILIARES ==========

  String _calcularStatus(double porcentagem) {
    if (porcentagem > 75) return "Alto";
    if (porcentagem > 30) return "M√©dio";
    return "Baixo";
  }

  void _listarItens(String titulo, List<dynamic> lista) {
    print('\n--- $titulo ---');
    if (lista.isEmpty) {
      print('Nenhum item cadastrado');
    } else {
      for (var item in lista) {
        try {
          if (item is Empresa) {
            item.exibirDados();
          } else if (item is Local) {
            item.exibirDados();
          } else if (item is Tanque) {
            item.exibirDados();
          } else if (item is Dispositivo) {
            item.exibirDados();
          } else if (item is SensorUltrassonico) {
            item.exibirDados();
          } else if (item is Leitura) {
            item.exibirDados();
          } else if (item is Producao) {
            item.exibirDados();
          } else if (item is Usuario) {
            item.exibirDados();
          } else {
            print('Item: ${item.toString()}');
          }
        } catch (e) {
          print('Erro ao exibir item: $e');
        }
        print('');
      }
    }
  }

  // ========== M√âTODOS DE CADASTRO ==========

  void cadastrarEmpresa() {
    try {
      stdout.write('ID: ');
      final id = int.parse(stdin.readLineSync()!);
      stdout.write('Nome: ');
      final nome = stdin.readLineSync()!;
      stdout.write('CNPJ: ');
      final cnpj = stdin.readLineSync()!;

      _empresas.add(Empresa(id, nome, cnpj));
      print('‚úÖ Empresa cadastrada!');
    } catch (e) {
      print('‚ùå Erro ao cadastrar empresa: $e');
    }
  }

  void cadastrarLocal() {
    try {
      stdout.write('ID: ');
      final id = int.parse(stdin.readLineSync()!);
      stdout.write('Nome: ');
      final nome = stdin.readLineSync()!;
      stdout.write('Refer√™ncia: ');
      final referencia = stdin.readLineSync()!;

      _locais.add(Local(id, nome, referencia));
      print('‚úÖ Local cadastrado!');
    } catch (e) {
      print('‚ùå Erro ao cadastrar local: $e');
    }
  }

  void cadastrarTanque() {
    try {
      stdout.write('ID: ');
      final id = int.parse(stdin.readLineSync()!);
      stdout.write('Altura (m): ');
      final altura = double.parse(stdin.readLineSync()!);
      stdout.write('Volume M√°x (m¬≥): ');
      final volMax = double.parse(stdin.readLineSync()!);
      stdout.write('Volume Atual (m¬≥): ');
      final volAtual = double.parse(stdin.readLineSync()!);

      _tanques.add(Tanque(id, altura, volMax, volAtual));
      print('‚úÖ Tanque cadastrado!');
    } catch (e) {
      print('‚ùå Erro ao cadastrar tanque: $e');
    }
  }

  void cadastrarDispositivo() {
    try {
      stdout.write('ID: ');
      final id = int.parse(stdin.readLineSync()!);
      stdout.write('Modelo: ');
      final modelo = stdin.readLineSync()!;
      stdout.write('Status: ');
      final status = stdin.readLineSync()!;

      _dispositivos.add(Dispositivo(id, modelo, status));
      print('‚úÖ Dispositivo cadastrado!');
    } catch (e) {
      print('‚ùå Erro ao cadastrar dispositivo: $e');
    }
  }

  void cadastrarSensor() {
    try {
      stdout.write('ID: ');
      final id = int.parse(stdin.readLineSync()!);
      stdout.write('Tipo: ');
      final tipo = stdin.readLineSync()!;
      stdout.write('Unidade: ');
      final unidade = stdin.readLineSync()!;

      _sensores.add(SensorUltrassonico(id, tipo, unidade));
      print('‚úÖ Sensor cadastrado!');
    } catch (e) {
      print('‚ùå Erro ao cadastrar sensor: $e');
    }
  }

  void cadastrarUsuario() {
    try {
      print('\n--- CADASTRAR USU√ÅRIO ---');
      stdout.write('ID: ');
      final id = int.parse(stdin.readLineSync()!);
      stdout.write('Nome: ');
      final nome = stdin.readLineSync()!;
      stdout.write('Email: ');
      final email = stdin.readLineSync()!;
      stdout.write('Senha: ');
      final senha = stdin.readLineSync()!;

      print('\nPerfis dispon√≠veis:');
      for (int i = 0; i < PerfilUsuario.todos.length; i++) {
        print('${i + 1} - ${PerfilUsuario.todos[i]}');
      }
      stdout.write('Escolha o perfil (1-${PerfilUsuario.todos.length}): ');
      final perfilIndex = int.parse(stdin.readLineSync()!) - 1;

      if (perfilIndex < 0 || perfilIndex >= PerfilUsuario.todos.length) {
        throw ArgumentError('Perfil inv√°lido');
      }

      final perfil = PerfilUsuario.todos[perfilIndex];
      final usuario = Usuario.criarUsuario(
        id: id,
        nome: nome,
        email: email,
        senha: senha,
        perfil: perfil,
      );

      _usuarios.add(usuario);
      print('‚úÖ Usu√°rio cadastrado com perfil $perfil!');
    } catch (e) {
      print('‚ùå Erro ao cadastrar usu√°rio: $e');
    }
  }

  // ========== M√âTODOS FIREBASE ==========

  Future<void> visualizarUltimaLeitura() async {
    print('\nüìä BUSCANDO √öLTIMA LEITURA DO TANKSENSE...');

    try {
      final ultimaLeituraData = await Menu.getUltimaLeitura();

      if (ultimaLeituraData == null) {
        print('‚ùå Nenhuma leitura encontrada no Firebase');
        return;
      }

      final leitura = Leitura.fromFirebase(ultimaLeituraData, 'ultima');
      print('\nüîÑ DADOS EM TEMPO REAL - TANKSENSE_ENTREGA06');
      print('‚ïê' * 50);
      leitura.exibirDados();
      print('‚ïê' * 50);
    } catch (e) {
      print('‚ùå Erro ao buscar √∫ltima leitura: $e');
    }
  }

  Future<void> visualizarUltimas10Leituras() async {
    print('\nüìä BUSCANDO √öLTIMAS 10 LEITURAS DO TANKSENSE...');

    try {
      final leiturasData = await Menu.getUltimas10Leituras();

      if (leiturasData.isEmpty) {
        print('‚ùå Nenhuma leitura encontrada no Firebase');
        return;
      }

      print('\nüìà HIST√ìRICO - √öLTIMAS ${leiturasData.length} LEITURAS');
      print('‚ïê' * 60);

      for (int i = 0; i < leiturasData.length; i++) {
        final data = leiturasData[i];
        final leitura = Leitura.fromFirebase(data, data['id'] ?? i.toString());

        print('üìã Leitura ${i + 1}');
        leitura.exibirDados();
        if (i < leiturasData.length - 1) print('‚îÄ' * 40);
      }
      print('‚ïê' * 60);
      print('üìä Total de leituras: ${leiturasData.length}');
    } catch (e) {
      print('‚ùå Erro ao buscar leituras: $e');
    }
  }

  Future<void> visualizarProducao() async {
    print('\nüè≠ CALCULANDO PRODU√á√ÉO BASEADA NAS LEITURAS...');

    try {
      final todasLeituras = await Menu.getTodasLeituras();

      if (todasLeituras.isEmpty) {
        print('‚ùå Nenhuma leitura encontrada para c√°lculo de produ√ß√£o');
        return;
      }

      double producaoTotal = 0.0;
      int leiturasComVariacao = 0;

      todasLeituras.sort((a, b) {
        final timestampA = a['timestamp'] ?? '';
        final timestampB = b['timestamp'] ?? '';
        return timestampA.compareTo(timestampB);
      });

      for (int i = 1; i < todasLeituras.length; i++) {
        final leituraAnterior = todasLeituras[i - 1];
        final leituraAtual = todasLeituras[i];

        final nivelAnterior = (leituraAnterior['nivel_cm'] ?? 0.0).toDouble();
        final nivelAtual = (leituraAtual['nivel_cm'] ?? 0.0).toDouble();

        if (nivelAtual < nivelAnterior) {
          final variacao = nivelAnterior - nivelAtual;
          producaoTotal += variacao;
          leiturasComVariacao++;
        }
      }

      print('\nüè≠ RELAT√ìRIO DE PRODU√á√ÉO - TANKSENSE_ENTREGA06');
      print('‚ïê' * 50);
      print('üìä Total de leituras analisadas: ${todasLeituras.length}');
      print('üîÑ Leituras com varia√ß√£o: $leiturasComVariacao');
      print(
          'üì¶ Produ√ß√£o total estimada: ${producaoTotal.toStringAsFixed(2)} cm¬≥');
      print(
          'üìà M√©dia por varia√ß√£o: ${leiturasComVariacao > 0 ? (producaoTotal / leiturasComVariacao).toStringAsFixed(2) : 0} cm¬≥');

      if (producaoTotal > 0) {
        final producao = Producao(
          _producoes.length + 1,
          producaoTotal,
          DateTime.now(),
        );
        _producoes.add(producao);
        print('\n‚úÖ Produ√ß√£o registrada no sistema!');
      }

      print('‚ïê' * 50);
    } catch (e) {
      print('‚ùå Erro ao calcular produ√ß√£o: $e');
    }
  }

  Future<void> testarConexaoFirebase() async {
    print('\nüß™ TESTANDO CONEX√ÉO COM FIREBASE...');

    try {
      final testData = await Menu.getUltimaLeitura();
      if (testData != null) {
        print('‚úÖ Conex√£o com Firebase OK!');
      } else {
        print('‚ùå Falha na conex√£o com Firebase');
      }
    } catch (e) {
      print('‚ùå Erro no teste de conex√£o: $e');
    }
  }

  // ========== M√âTODOS BANCO DE DADOS ==========

  void configurarBancoDados() {
    print('\nüîß CONFIGURAR BANCO DE DADOS');
    print('‚îÄ' * 30);

    try {
      stdout.write('üìç Host (ex: localhost): ');
      final host = stdin.readLineSync() ?? 'localhost';

      stdout.write('üö™ Porta (ex: 3306): ');
      final porta = int.parse(stdin.readLineSync() ?? '3306');

      stdout.write('üë§ Usu√°rio (ex: root): ');
      final usuario = stdin.readLineSync() ?? 'root';

      stdout.write('üîë Senha: ');
      final senha = stdin.readLineSync() ?? '';

      stdout.write('üóÉÔ∏è  Nome do Database (ex: tanksense): ');
      final dbName = stdin.readLineSync() ?? 'tanksense';

      _dbConfig = DatabaseConfig(
        host: host,
        porta: porta,
        usuario: usuario,
        senha: senha,
        dbName: dbName,
      );

      _dbConnection = DatabaseConnection(_dbConfig!);

      print('\n‚úÖ Configura√ß√£o salva!');
      _dbConfig!.exibirConfig();
    } catch (e) {
      print('‚ùå Erro na configura√ß√£o: $e');
    }
  }

  Future<void> conectarBancoDados() async {
    if (_dbConfig == null) {
      print('‚ùå Configure o banco de dados primeiro!');
      return;
    }

    print('\nüîó CONECTANDO AO BANCO DE DADOS...');
    _dbConectado = await _dbConnection!.connect();

    if (_dbConectado) {
      print('‚úÖ Conectado com sucesso ao banco de dados!');
    } else {
      print('‚ùå Falha na conex√£o com o banco de dados');
    }
  }

  void desconectarBancoDados() async {
    if (_dbConnection != null && _dbConectado) {
      await _dbConnection!.close();
      _dbConectado = false;
      print('üîå Desconectado do banco de dados');
    } else {
      print('‚ÑπÔ∏è  Nenhuma conex√£o ativa para desconectar');
    }
  }

  void exibirStatusBanco() {
    print('\nüìä STATUS DO BANCO DE DADOS');
    print('‚îÄ' * 25);

    if (_dbConfig == null) {
      print('‚ùå Banco n√£o configurado');
      return;
    }

    _dbConfig!.exibirConfig();
    print('üîå Status: ${_dbConectado ? '‚úÖ Conectado' : '‚ùå Desconectado'}');
  }

  Future<void> sincronizarFirebaseParaMySQL() async {
    if (!_dbConectado) {
      print('‚ùå Conecte ao banco de dados primeiro!');
      return;
    }

    print('\nüîÑ SINCRONIZANDO FIREBASE ‚Üí MYSQL');
    print('‚ïê' * 35);

    try {
      final leiturasFirebase = await Menu.getTodasLeituras();

      if (leiturasFirebase.isEmpty) {
        print('üì≠ Nenhuma leitura encontrada no Firebase');
        return;
      }

      print('üì• Encontradas ${leiturasFirebase.length} leituras no Firebase');
      print('üíæ Iniciando sincroniza√ß√£o...');

      int sincronizadas = 0;
      for (final data in leiturasFirebase) {
        final leitura =
            Leitura.fromFirebase(data, data['id'] ?? 'sync_$sincronizadas');
        await _dbConnection!.salvarLeitura(leitura as dynamic);
        sincronizadas++;

        if (sincronizadas % 5 == 0) {
          print(
              '   üì¶ $sincronizadas/${leiturasFirebase.length} leituras processadas...');
        }
      }

      print('\n‚úÖ Sincroniza√ß√£o conclu√≠da!');
      print('   üìä Total de leituras sincronizadas: $sincronizadas');
    } catch (e) {
      print('‚ùå Erro na sincroniza√ß√£o: $e');
    }
  }

  Future<void> backupDadosLocais() async {
    if (!_dbConectado) {
      print('‚ùå Conecte ao banco de dados primeiro!');
      return;
    }

    print('\nüíæ FAZENDO BACKUP DOS DADOS LOCAIS');
    print('‚ïê' * 35);

    try {
      int totalBackup = 0;

      // Backup de empresas
      for (final empresa in _empresas) {
        print('üíº Backup empresa: ${empresa.nome}');
        totalBackup++;
      }

      // Backup de locais
      for (final local in _locais) {
        print('üè† Backup local: ${local.nome}');
        totalBackup++;
      }

      // Backup de leituras
      for (final leitura in _leituras) {
        await _dbConnection!.salvarLeitura(leitura as dynamic);
        totalBackup++;
      }

      print('\n‚úÖ Backup conclu√≠do!');
      print('   üì¶ Total de registros backup: $totalBackup');
    } catch (e) {
      print('‚ùå Erro no backup: $e');
    }
  }

  // ========== OUTROS M√âTODOS ==========

  void listarTodosDados() {
    print('\n${'‚ïê' * 60}');
    print('üìã LISTAGEM COMPLETA - TANKSENSE_ENTREGA06');
    print('‚ïê' * 60);

    _listarItens('üè¢ EMPRESAS', _empresas);
    _listarItens('üè† LOCAIS', _locais);
    _listarItens('üõ¢Ô∏è TANQUES', _tanques);
    _listarItens('‚öôÔ∏è DISPOSITIVOS', _dispositivos);
    _listarItens('üì° SENSORES', _sensores);
    _listarItens('üìä LEITURAS', _leituras);
    _listarItens('üè≠ PRODU√á√ïES', _producoes);
    _listarItens('üë§ USU√ÅRIOS', _usuarios);

    if (_dbConfig != null) {
      print('\nüóÉÔ∏è  CONFIGURA√á√ÉO DO BANCO:');
      _dbConfig!.exibirConfig();
      print('üîå Status: ${_dbConectado ? '‚úÖ Conectado' : '‚ùå Desconectado'}');
    }

    print('‚ïê' * 60);
  }

  void simularSistema() {
    print('\n=== SIMULA√á√ÉO DO SISTEMA ===');

    if (_tanques.isEmpty || _sensores.isEmpty) {
      print('‚ö†Ô∏è Cadastre um tanque e um sensor primeiro');
      return;
    }

    print('Simulando 3 leituras...');
    for (int i = 1; i <= 3; i++) {
      final distancia = _sensores.first.coletarDado();
      final nivel = 200 - distancia;
      final porcentagem = (nivel / 200) * 100;

      final leitura = Leitura(
        _leituras.length + 1,
        DateTime.now().add(Duration(seconds: i * 5)),
        distancia,
        nivel,
        porcentagem,
        _calcularStatus(porcentagem),
      );

      _leituras.add(leitura);
      leitura.exibirDados();

      if (porcentagem < 30) {
        print('‚ö†Ô∏è ALERTA: N√≠vel Baixo!');
      }
    }
    print('‚úÖ Simula√ß√£o conclu√≠da!');
  }

  // ========== M√âTODO PRINCIPAL ==========

  void executar() {
    print("\n");
    print('''
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë      SISTEMA DE MONITORAMENTO      ‚ïë
‚ïë         üõ¢Ô∏è  TANKSENSE üõ¢Ô∏è             ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
  ''');

    bool executando = true;

    while (executando) {
      print('‚ïê' * 50);
      print('üîß MENU PRINCIPAL - TANKSENSE');
      print('‚ïê' * 50);
      print('1Ô∏è‚É£  - üè¢ Cadastrar Empresa');
      print('2Ô∏è‚É£  - üè† Cadastrar Local');
      print('3Ô∏è‚É£  - üõ¢Ô∏è  Cadastrar Tanque');
      print('4Ô∏è‚É£  - ‚öôÔ∏è  Cadastrar Dispositivo');
      print('5Ô∏è‚É£  - üì° Cadastrar Sensor');
      print('6Ô∏è‚É£  - üë§ Cadastrar Usu√°rio');
      print('‚ïê' * 50);
      print('üìä CONSULTAS EM TEMPO REAL - FIREBASE');
      print('7Ô∏è‚É£  - üîÑ Visualizar √öltima Leitura');
      print('8Ô∏è‚É£  - üìà Visualizar √öltimas 10 Leituras');
      print('9Ô∏è‚É£  - üè≠ Visualizar Produ√ß√£o');
      print('üîü - üß™ Testar Conex√£o Firebase');
      print('‚ïê' * 50);
      print('üóÉÔ∏è  BANCO DE DADOS MYSQL');
      print('1Ô∏è‚É£1Ô∏è‚É£ - ‚öôÔ∏è  Configurar Banco');
      print('1Ô∏è‚É£2Ô∏è‚É£ - üîó Conectar Banco');
      print('1Ô∏è‚É£3Ô∏è‚É£ - üîå Desconectar Banco');
      print('1Ô∏è‚É£4Ô∏è‚É£ - üìä Status do Banco');
      print('1Ô∏è‚É£5Ô∏è‚É£ - üîÑ Sincronizar Firebase‚ÜíMySQL');
      print('1Ô∏è‚É£6Ô∏è‚É£ - üíæ Backup Dados Locais');
      print('‚ïê' * 50);
      print('üîß OUTRAS OP√á√ïES');
      print('1Ô∏è‚É£7Ô∏è‚É£ - üìã Listar Todos os Dados Locais');
      print('1Ô∏è‚É£8Ô∏è‚É£ - üß™ Simular Sistema');
      print('0Ô∏è‚É£  - ‚ùå Sair');
      print('‚îÄ' * 50);

      stdout.write('üëâ Escolha: ');
      final opcao = stdin.readLineSync();

      switch (opcao) {
        case '1':
          cadastrarEmpresa();
          break;
        case '2':
          cadastrarLocal();
          break;
        case '3':
          cadastrarTanque();
          break;
        case '4':
          cadastrarDispositivo();
          break;
        case '5':
          cadastrarSensor();
          break;
        case '6':
          cadastrarUsuario();
          break;
        case '7':
          visualizarUltimaLeitura();
          break;
        case '8':
          visualizarUltimas10Leituras();
          break;
        case '9':
          visualizarProducao();
          break;
        case '10':
          testarConexaoFirebase();
          break;
        case '11':
          configurarBancoDados();
          break;
        case '12':
          conectarBancoDados();
          break;
        case '13':
          desconectarBancoDados();
          break;
        case '14':
          exibirStatusBanco();
          break;
        case '15':
          sincronizarFirebaseParaMySQL();
          break;
        case '16':
          backupDadosLocais();
          break;
        case '17':
          listarTodosDados();
          break;
        case '18':
          simularSistema();
          break;
        case '0':
          desconectarBancoDados();
          print('\nüëã Encerrando Tanksense_Entrega06...');
          executando = false;
          break;
        default:
          print('‚ùå Op√ß√£o inv√°lida!');
      }

      if (executando) {
        print('\n‚èé Pressione Enter para continuar...');
        stdin.readLineSync();
      }
    }

    print('\nüõ¢Ô∏è tanksense_entrega06 finalizado. At√© logo!');
  }
}
